#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>


using namespace std;

struct PesRental {
    string nama;
    int durasi;
    int jumlahPes;
    double harga;
    PesRental* next;  // Pointer ke node berikutnya dalam linked list
};

double hitungTotalHarga(const PesRental& pes) {
    return pes.harga * pes.jumlahPes * pes.durasi;
}

void tampilkanPesanan(const PesRental& pes) {
    cout << "========== Rincian Pesanan ==========" << endl;
    cout << "Nama Pemesan: " << pes.nama << endl;
    cout << "Durasi Rental: " << pes.durasi << " jam" << endl;
    cout << "Jumlah PlayStation: " << pes.jumlahPes << endl;
    cout << "Harga per PlayStation per jam: Rp. " << pes.harga << "000" << endl;
    cout << "Total Harga: Rp. " << hitungTotalHarga(pes) << "000" << endl;
    cout << "======================================" << endl;
}

bool comparePesanan(const PesRental& pes1, const PesRental& pes2) {
    return pes1.nama < pes2.nama;
}

int cariPesanan(const vector<PesRental>& pesanan, const string& namaPemesan) {
    for (int i = 0; i < pesanan.size(); i++) {
        if (pesanan[i].nama == namaPemesan) {
            return i;
        }
    }
    return -1;
}

void tampilkanMenuPes() {
    cout << "Menu PES:" << endl;
    cout << "1. PS 2 - Harga: Rp.5000/jam" << endl;
	cout << "2. PS 3 - Harga: Rp.6000/jam" << endl;
	cout << "3. PS 4 - Harga: Rp.10000/jam" << endl;
	cout << "4. PS 5 - Harga: Rp.15000/jam" << endl;
    cout << "5. Kembali ke menu utama" << endl;
}

double getPesHarga(int pilihanPes) {
    switch (pilihanPes) {
        case 1:
            return 5.0;
        case 2:
            return 6.0;
        case 3:
            return 7.0;
        case 4:
            return 8.0;
        default:
            return 0.0;
    }
}

int main() {
    PesRental* head = NULL;  // Pointer ke kepala linked list
    PesRental* tail = NULL;  // Pointer ke ekor linked list

    cout << "Selamat datang di layanan pemesanan rental PlayStation!" << endl;

    int opsi;
    do {
        cout << endl;
        cout << "Pilih salah satu opsi:" << endl;
        cout << "1. Tambah Pesanan" << endl;
        cout << "2. Tampilkan Semua Pesanan" << endl;
        cout << "3. Urutkan Pesanan" << endl;
        cout << "4. Cari Pesanan" << endl;
        cout << "5. Keluar" << endl;
        cout << "Opsi: ";
        cin >> opsi;
        cin.ignore();
        system ("cls");
        
        switch (opsi) {
            case 1: {
                PesRental* pes = new PesRental;

                cout << "Silakan masukkan rincian pesanan Anda." << endl;

                cout << "Nama Pemesan: ";
                getline(cin, pes->nama);

                cout << "Durasi Rental (dalam jam): ";
                cin >> pes->durasi;

                int pilihanPes;
                do {
                    tampilkanMenuPes();
                    cout << "Pilihan Pes: ";
                    cin >> pilihanPes;
                    system ("cls");
                } while (pilihanPes < 1 || pilihanPes > 5);

                if (pilihanPes == 5) {
                    delete pes;
                    break;
                }

                pes->jumlahPes = 1;
                pes->harga = getPesHarga(pilihanPes);

                pes->next = NULL;

                if (head == NULL) {
                    // Linked list kosong
                    head = pes;
                    tail = pes;
                } else {
                    // Sambungkan pesanan baru ke ekor linked list
                    tail->next = pes;
                    tail = pes;
                }

                break;
            }
            case 2: {
                if (head == NULL) {
                    cout << "Belum ada pesanan yang tersimpan." << endl;
                } else {
                    PesRental* temp = head;
                    cout << "Daftar Pesanan:" << endl;
                    while (temp != NULL) {
                        tampilkanPesanan(*temp);
                        temp = temp->next;
                    }
                }
                break;
            }
            case 3: {
                if (head == NULL) {
                    cout << "Belum ada pesanan yang tersimpan." << endl;
                } else {
                    vector<PesRental> temp;
                    PesRental* current = head;
                    while (current != NULL) {
                        temp.push_back(*current);
                        current = current->next;
                    }
                    sort(temp.begin(), temp.end(), comparePesanan);

                    // Hapus semua node dalam linked list
                    while (head != NULL) {
                        PesRental* temp = head;
                        head = head->next;
                        delete temp;
                    }

                    // Buat linked list baru dengan urutan yang diurutkan
                   for (vector<PesRental>::const_iterator iter = temp.begin(); iter != temp.end(); ++iter) {
    				const PesRental& pes = *iter;
    				PesRental* newNode = new PesRental;
    				*newNode = pes;
    				newNode->next = NULL;

    				if (head == NULL) {
        				head = newNode;
        				tail = newNode;
    				} else {
       					 tail->next = newNode;
       					 tail = newNode;
    					}
					}


                    cout << "Pesanan berhasil diurutkan berdasarkan nama pemesan." << endl;
                }
                break;
            }
            case 4: {
                if (head == NULL) {
                    cout << "Belum ada pesanan yang tersimpan." << endl;
                } else {
                    string namaPemesan;
                    cout << "Masukkan nama pemesan yang ingin dicari: ";
                    getline(cin, namaPemesan);

                    PesRental* current = head;
                    bool found = false;
                    while (current != NULL) {
                        if (current->nama == namaPemesan) {
                            tampilkanPesanan(*current);
                            found = true;
                        }
                        current = current->next;
                    }

                    if (!found) {
                        cout << "Pesanan dengan nama pemesan tersebut tidak ditemukan." << endl;
                    }
                }
                break;
            }
            case 5: {
                // Hapus semua node dalam linked list sebelum keluar
                while (head != NULL) {
                    PesRental* temp = head;
                    head = head->next;
                    delete temp;
                }
                cout << "Terima kasih telah menggunakan layanan pemesanan rental PlayStation!" << endl;
                break;
            }
            default:
                cout << "Opsi yang Anda pilih tidak valid. Silakan coba lagi." << endl;
        }
    } while (opsi != 5);

    return 0;
}